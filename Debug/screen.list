
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d34  08003d34  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d34  08003d34  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d34  08003d34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003400  2000005c  08003d98  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000345c  08003d98  0002345c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e0d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df1  00000000  00000000  00029ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d7  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199ab  00000000  00000000  0002cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b784  00000000  00000000  00046642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086672  00000000  00000000  00051dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002948  00000000  00000000  000d8438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000dad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c20 	.word	0x08003c20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08003c20 	.word	0x08003c20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpun>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f80:	d102      	bne.n	8000f88 <__aeabi_fcmpun+0x14>
 8000f82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f86:	d108      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_fcmpun+0x20>
 8000f8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f92:	d102      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0001 	mov.w	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2iz>:
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30f      	bcc.n	8000fca <__aeabi_f2iz+0x2a>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d90d      	bls.n	8000fd0 <__aeabi_f2iz+0x30>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	bf18      	it	ne
 8000fc6:	4240      	negne	r0, r0
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2iz+0x3a>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_f2iz+0x46>
 8000fda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fde:	bf08      	it	eq
 8000fe0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <_Z15convertHexToRgbt>:
class Char{
private:
	uint32_t rows;
};

RGB convertHexToRgb(uint16_t hexValue){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	struct RGB rgbColor;
	  rgbColor.r = ((hexValue >> 16) & 0xFF) / 255.0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	723b      	strb	r3, [r7, #8]
	  rgbColor.g = ((hexValue >> 8) & 0xFF) / 255.0;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f9f5 	bl	80003f4 <__aeabi_i2d>
 800100a:	a31d      	add	r3, pc, #116	; (adr r3, 8001080 <_Z15convertHexToRgbt+0x90>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fb84 	bl	800071c <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fc66 	bl	80008ec <__aeabi_d2uiz>
 8001020:	4603      	mov	r3, r0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	727b      	strb	r3, [r7, #9]
	  rgbColor.b = ((hexValue) & 0xFF) / 255.0;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f9e2 	bl	80003f4 <__aeabi_i2d>
 8001030:	a313      	add	r3, pc, #76	; (adr r3, 8001080 <_Z15convertHexToRgbt+0x90>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fb71 	bl	800071c <__aeabi_ddiv>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fc53 	bl	80008ec <__aeabi_d2uiz>
 8001046:	4603      	mov	r3, r0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	72bb      	strb	r3, [r7, #10]
	  return rgbColor;
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	f107 0208 	add.w	r2, r7, #8
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	4611      	mov	r1, r2
 8001058:	8019      	strh	r1, [r3, #0]
 800105a:	3302      	adds	r3, #2
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	2300      	movs	r3, #0
 8001062:	7b3a      	ldrb	r2, [r7, #12]
 8001064:	f362 0307 	bfi	r3, r2, #0, #8
 8001068:	7b7a      	ldrb	r2, [r7, #13]
 800106a:	f362 230f 	bfi	r3, r2, #8, #8
 800106e:	7bba      	ldrb	r2, [r7, #14]
 8001070:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	f3af 8000 	nop.w
 8001080:	00000000 	.word	0x00000000
 8001084:	406fe000 	.word	0x406fe000

08001088 <_ZN10LcdDisplayC1Ev>:

static uint16_t frameBuffer[LcdDisplay::LCD_WIDTH * LcdDisplay::LCD_HEIGHT]; //can be inside the class but it's here to show memory usage more clearly

LcdDisplay::LcdDisplay() {
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ae      	sub	sp, #184	; 0xb8
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <_ZN10LcdDisplayC1Ev+0xc0>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	601a      	str	r2, [r3, #0]
	const uint16_t initTable[]  {
 8001096:	4a2d      	ldr	r2, [pc, #180]	; (800114c <_ZN10LcdDisplayC1Ev+0xc4>)
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4611      	mov	r1, r2
 800109e:	2298      	movs	r2, #152	; 0x98
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fd67 	bl	8003b74 <memcpy>
	  CMD(0xf6), 0x00,
	  CMD(ST7735S_COLMOD), 0x05,
	  CMD(ST7735S_MADCTL), 0xa0,
	};

	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2104      	movs	r1, #4
 80010aa:	4829      	ldr	r0, [pc, #164]	; (8001150 <_ZN10LcdDisplayC1Ev+0xc8>)
 80010ac:	f001 fd86 	bl	8002bbc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f001 facd 	bl	8002650 <HAL_Delay>
	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	4825      	ldr	r0, [pc, #148]	; (8001150 <_ZN10LcdDisplayC1Ev+0xc8>)
 80010bc:	f001 fd7e 	bl	8002bbc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 fac5 	bl	8002650 <HAL_Delay>

	  for (auto hexMsg: initTable) {
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80010d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010da:	3398      	adds	r3, #152	; 0x98
 80010dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80010e0:	e00f      	b.n	8001102 <_ZN10LcdDisplayC1Ev+0x7a>
 80010e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		  lcdSend(hexMsg);
 80010ec:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f856 	bl	80011a4 <_ZN10LcdDisplay7lcdSendEt>
	  for (auto hexMsg: initTable) {
 80010f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010fc:	3302      	adds	r3, #2
 80010fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800110a:	429a      	cmp	r2, r3
 800110c:	d1e9      	bne.n	80010e2 <_ZN10LcdDisplayC1Ev+0x5a>
	  }

	  HAL_Delay(200);
 800110e:	20c8      	movs	r0, #200	; 0xc8
 8001110:	f001 fa9e 	bl	8002650 <HAL_Delay>

	  lcdCmd(ST7735S_SLPOUT);
 8001114:	2111      	movs	r1, #17
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f81c 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
	  HAL_Delay(120);
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f001 fa97 	bl	8002650 <HAL_Delay>

	  lcdCmd(ST7735S_DISPON);
 8001122:	2129      	movs	r1, #41	; 0x29
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f815 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>

	  lcdCreateRectangle(0, 0, 160, 128, BLACK);
 800112a:	2300      	movs	r3, #0
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f877 	bl	800122c <_ZN10LcdDisplay18lcdCreateRectangleEiiiit>

}
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	37b0      	adds	r7, #176	; 0xb0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08003d00 	.word	0x08003d00
 800114c:	08003c38 	.word	0x08003c38
 8001150:	40010c00 	.word	0x40010c00

08001154 <_ZN10LcdDisplay6lcdCmdEh>:

 void LcdDisplay::lcdCmd(uint8_t cmd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <_ZN10LcdDisplay6lcdCmdEh+0x48>)
 8001168:	f001 fd28 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <_ZN10LcdDisplay6lcdCmdEh+0x48>)
 8001174:	f001 fd22 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001178:	1cf9      	adds	r1, r7, #3
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	2201      	movs	r2, #1
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <_ZN10LcdDisplay6lcdCmdEh+0x4c>)
 8001182:	f002 f9e9 	bl	8003558 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <_ZN10LcdDisplay6lcdCmdEh+0x48>)
 800118e:	f001 fd15 	bl	8002bbc <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	20003278 	.word	0x20003278

080011a4 <_ZN10LcdDisplay7lcdSendEt>:

 void LcdDisplay::lcdSend(uint16_t value)
 {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 	if (value & 0x100) {
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <_ZN10LcdDisplay7lcdSendEt+0x24>
 		lcdCmd(value);
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffc7 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
 	} else {
 		lcdData(value);
 	}
 }
 80011c6:	e005      	b.n	80011d4 <_ZN10LcdDisplay7lcdSendEt+0x30>
 		lcdData(value);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f804 	bl	80011dc <_ZN10LcdDisplay7lcdDataEh>
 }
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN10LcdDisplay7lcdDataEh>:

 void LcdDisplay::lcdData(uint8_t data)
 {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
 	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <_ZN10LcdDisplay7lcdDataEh+0x48>)
 80011f0:	f001 fce4 	bl	8002bbc <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <_ZN10LcdDisplay7lcdDataEh+0x48>)
 80011fc:	f001 fcde 	bl	8002bbc <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001200:	1cf9      	adds	r1, r7, #3
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2201      	movs	r2, #1
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <_ZN10LcdDisplay7lcdDataEh+0x4c>)
 800120a:	f002 f9a5 	bl	8003558 <HAL_SPI_Transmit>
 	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <_ZN10LcdDisplay7lcdDataEh+0x48>)
 8001216:	f001 fcd1 	bl	8002bbc <HAL_GPIO_WritePin>
 }
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40010c00 	.word	0x40010c00
 8001228:	20003278 	.word	0x20003278

0800122c <_ZN10LcdDisplay18lcdCreateRectangleEiiiit>:

void LcdDisplay::lcdCreateRectangle(int x, int y, int width, int height, uint16_t color){
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
 	lcdSetWindow(x, y, width, height);
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f833 	bl	80012b0 <_ZN10LcdDisplay12lcdSetWindowEiiii>

 	lcdCmd(ST7735S_RAMWR);
 800124a:	212c      	movs	r1, #44	; 0x2c
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff ff81 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
 	for (int i = 0; i < width * height; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e007      	b.n	8001268 <_ZN10LcdDisplay18lcdCreateRectangleEiiiit+0x3c>
 		lcdDataTwoBajts(color);
 8001258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 f80f 	bl	8001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>
 	for (int i = 0; i < width * height; i++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6a3a      	ldr	r2, [r7, #32]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbf0      	blt.n	8001258 <_ZN10LcdDisplay18lcdCreateRectangleEiiiit+0x2c>
 }
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>:

void LcdDisplay::lcdDataTwoBajts(uint16_t value)
 {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 	lcdData(value >> 8);
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b29b      	uxth	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa0 	bl	80011dc <_ZN10LcdDisplay7lcdDataEh>
 	lcdData(value);
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff9a 	bl	80011dc <_ZN10LcdDisplay7lcdDataEh>
 }
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN10LcdDisplay12lcdSetWindowEiiii>:

void LcdDisplay::lcdSetWindow(int x, int y, int width, int height)
 {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
 	lcdCmd(ST7735S_CASET);
 80012be:	212a      	movs	r1, #42	; 0x2a
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff47 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
 	lcdDataTwoBajts(LCD_OFFSET_X + x);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ffd5 	bl	8001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>
 	lcdDataTwoBajts(LCD_OFFSET_X + x + width - 1);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff ffcb 	bl	8001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>

 	lcdCmd(ST7735S_RASET);
 80012ea:	212b      	movs	r1, #43	; 0x2b
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff ff31 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
 	lcdDataTwoBajts(LCD_OFFSET_Y + y);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3302      	adds	r3, #2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff ffbf 	bl	8001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>
 	lcdDataTwoBajts(LCD_OFFSET_Y + y + height- 1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	b29a      	uxth	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	3301      	adds	r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff ffb3 	bl	8001280 <_ZN10LcdDisplay15lcdDataTwoBajtsEt>
 }
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_ZN10LcdDisplay8putPixelEiit>:

void LcdDisplay::putPixel(int x, int y, uint16_t color)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	807b      	strh	r3, [r7, #2]
	if(x <= LcdDisplay::LCD_WIDTH && y <= LcdDisplay::LCD_HEIGHT && x >= 0 && y >= 0){
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b50      	cmp	r3, #80	; 0x50
 8001336:	dc14      	bgt.n	8001362 <_ZN10LcdDisplay8putPixelEiit+0x3e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b50      	cmp	r3, #80	; 0x50
 800133c:	dc11      	bgt.n	8001362 <_ZN10LcdDisplay8putPixelEiit+0x3e>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0e      	blt.n	8001362 <_ZN10LcdDisplay8putPixelEiit+0x3e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <_ZN10LcdDisplay8putPixelEiit+0x3e>
		frameBuffer[x + y * LCD_WIDTH] = color;
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	4904      	ldr	r1, [pc, #16]	; (800136c <_ZN10LcdDisplay8putPixelEiit+0x48>)
 800135c:	887a      	ldrh	r2, [r7, #2]
 800135e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000078 	.word	0x20000078

08001370 <_ZN10LcdDisplay4showEv>:

void LcdDisplay::show(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
	lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001378:	2350      	movs	r3, #80	; 0x50
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2350      	movs	r3, #80	; 0x50
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff94 	bl	80012b0 <_ZN10LcdDisplay12lcdSetWindowEiiii>

	lcdCmd(ST7735S_RAMWR);
 8001388:	212c      	movs	r1, #44	; 0x2c
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fee2 	bl	8001154 <_ZN10LcdDisplay6lcdCmdEh>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <_ZN10LcdDisplay4showEv+0x5c>)
 8001398:	f001 fc10 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <_ZN10LcdDisplay4showEv+0x5c>)
 80013a4:	f001 fc0a 	bl	8002bbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer), HAL_MAX_DELAY);
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <_ZN10LcdDisplay4showEv+0x60>)
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <_ZN10LcdDisplay4showEv+0x64>)
 80013b4:	f002 f8d0 	bl	8003558 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <_ZN10LcdDisplay4showEv+0x5c>)
 80013c0:	f001 fbfc 	bl	8002bbc <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	20000078 	.word	0x20000078
 80013d4:	20003278 	.word	0x20003278

080013d8 <_ZN10LcdDisplay13drawRectangleEaaaat>:
        putPixel(xc + y, yc - x, color);
        putPixel(xc - y, yc - x, color);
    }
}

void LcdDisplay::drawRectangle(int8_t xp, int8_t yp, int8_t width, int8_t height, uint16_t color){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	70fb      	strb	r3, [r7, #3]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70bb      	strb	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	707b      	strb	r3, [r7, #1]
	for (int y = 0; y < height; y++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e019      	b.n	800142c <_ZN10LcdDisplay13drawRectangleEaaaat+0x54>
	    for (int x = 0; x < width; x++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	e00e      	b.n	800141c <_ZN10LcdDisplay13drawRectangleEaaaat+0x44>
	    	putPixel(xp+x, yp+y, color);
 80013fe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	18d1      	adds	r1, r2, r3
 8001406:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	441a      	add	r2, r3
 800140e:	8bbb      	ldrh	r3, [r7, #28]
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff87 	bl	8001324 <_ZN10LcdDisplay8putPixelEiit>
	    for (int x = 0; x < width; x++) {
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbeb      	blt.n	80013fe <_ZN10LcdDisplay13drawRectangleEaaaat+0x26>
	for (int y = 0; y < height; y++) {
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	429a      	cmp	r2, r3
 8001434:	dbe0      	blt.n	80013f8 <_ZN10LcdDisplay13drawRectangleEaaaat+0x20>
	    }
	  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZN10LcdDisplay14fadedRectangleEaaaatt>:

void LcdDisplay::fadedRectangle(int8_t xp, int8_t yp, int8_t width, int8_t height, uint16_t color , uint16_t endColor){
 8001440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	4608      	mov	r0, r1
 800144c:	4611      	mov	r1, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4603      	mov	r3, r0
 8001452:	70fb      	strb	r3, [r7, #3]
 8001454:	460b      	mov	r3, r1
 8001456:	70bb      	strb	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
	uint16_t difference = color-endColor;
 800145c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800145e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	81fb      	strh	r3, [r7, #14]
	convertHexToRgb(color);
 8001464:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fdc2 	bl	8000ff0 <_Z15convertHexToRgbt>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	723a      	strb	r2, [r7, #8]
 8001472:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001476:	727a      	strb	r2, [r7, #9]
 8001478:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800147c:	72bb      	strb	r3, [r7, #10]
	for (int y = 0; y < height; y++) {
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e043      	b.n	800150c <_ZN10LcdDisplay14fadedRectangleEaaaatt+0xcc>
	    for (int x = 0; x < width; x++) {
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e00e      	b.n	80014a8 <_ZN10LcdDisplay14fadedRectangleEaaaatt+0x68>
	    	putPixel(xp+x, yp+y, color);
 800148a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	18d1      	adds	r1, r2, r3
 8001492:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	441a      	add	r2, r3
 800149a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff41 	bl	8001324 <_ZN10LcdDisplay8putPixelEiit>
	    for (int x = 0; x < width; x++) {
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	3301      	adds	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbeb      	blt.n	800148a <_ZN10LcdDisplay14fadedRectangleEaaaatt+0x4a>
	    }
	    color -= difference / (height*10.0);
 80014b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe ff9d 	bl	80003f4 <__aeabi_i2d>
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ff97 	bl	80003f4 <__aeabi_i2d>
 80014c6:	4680      	mov	r8, r0
 80014c8:	4689      	mov	r9, r1
 80014ca:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ff90 	bl	80003f4 <__aeabi_i2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <_ZN10LcdDisplay14fadedRectangleEaaaatt+0xe4>)
 80014da:	f7fe fff5 	bl	80004c8 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4640      	mov	r0, r8
 80014e4:	4649      	mov	r1, r9
 80014e6:	f7ff f919 	bl	800071c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7fe fe31 	bl	8000158 <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff f9f5 	bl	80008ec <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	86bb      	strh	r3, [r7, #52]	; 0x34
	for (int y = 0; y < height; y++) {
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	429a      	cmp	r2, r3
 8001514:	dbb6      	blt.n	8001484 <_ZN10LcdDisplay14fadedRectangleEaaaatt+0x44>
	  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001522:	bf00      	nop
 8001524:	40240000 	.word	0x40240000

08001528 <_ZN10LcdDisplay8drawLineEfffft>:
			y--;
		}
	}
}

void LcdDisplay::drawLine(float xb, float yb, float xe, float ye, uint16_t color){
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
	auto a = (ye - yb)/(xe - xb);
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800153a:	f7ff fa4b 	bl	80009d4 <__aeabi_fsub>
 800153e:	4603      	mov	r3, r0
 8001540:	461c      	mov	r4, r3
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f7ff fa45 	bl	80009d4 <__aeabi_fsub>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fbfe 	bl	8000d50 <__aeabi_fdiv>
 8001554:	4603      	mov	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]
	auto b = yb - a*xb;
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	69b8      	ldr	r0, [r7, #24]
 800155c:	f7ff fb44 	bl	8000be8 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fa35 	bl	80009d4 <__aeabi_fsub>
 800156a:	4603      	mov	r3, r0
 800156c:	617b      	str	r3, [r7, #20]
	int8_t end = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	77fb      	strb	r3, [r7, #31]
	int8_t start = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	77bb      	strb	r3, [r7, #30]
	if (xb > xe){
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7ff fcf1 	bl	8000f60 <__aeabi_fcmpgt>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00a      	beq.n	800159a <_ZN10LcdDisplay8drawLineEfffft+0x72>
		end = xb;
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f7ff fd0b 	bl	8000fa0 <__aeabi_f2iz>
 800158a:	4603      	mov	r3, r0
 800158c:	77fb      	strb	r3, [r7, #31]
		start = xe;
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7ff fd06 	bl	8000fa0 <__aeabi_f2iz>
 8001594:	4603      	mov	r3, r0
 8001596:	77bb      	strb	r3, [r7, #30]
 8001598:	e02b      	b.n	80015f2 <_ZN10LcdDisplay8drawLineEfffft+0xca>
	}else{
		end = xe;
 800159a:	6838      	ldr	r0, [r7, #0]
 800159c:	f7ff fd00 	bl	8000fa0 <__aeabi_f2iz>
 80015a0:	4603      	mov	r3, r0
 80015a2:	77fb      	strb	r3, [r7, #31]
		start = xb;
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7ff fcfb 	bl	8000fa0 <__aeabi_f2iz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	77bb      	strb	r3, [r7, #30]
	}
	while(start <= end){
 80015ae:	e020      	b.n	80015f2 <_ZN10LcdDisplay8drawLineEfffft+0xca>
		putPixel(start, a*start + b, color);
 80015b0:	f997 401e 	ldrsb.w	r4, [r7, #30]
 80015b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fac1 	bl	8000b40 <__aeabi_i2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	69b9      	ldr	r1, [r7, #24]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb10 	bl	8000be8 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	6979      	ldr	r1, [r7, #20]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa03 	bl	80009d8 <__addsf3>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fce3 	bl	8000fa0 <__aeabi_f2iz>
 80015da:	4602      	mov	r2, r0
 80015dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015de:	4621      	mov	r1, r4
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fe9f 	bl	8001324 <_ZN10LcdDisplay8putPixelEiit>
		start++;
 80015e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	77bb      	strb	r3, [r7, #30]
	while(start <= end){
 80015f2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80015f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	ddd8      	ble.n	80015b0 <_ZN10LcdDisplay8drawLineEfffft+0x88>
	}

}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3724      	adds	r7, #36	; 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}

08001608 <_ZN10LcdDisplay12drawTriangleEaaaaaas>:

void LcdDisplay::drawTriangle(int8_t x0, int8_t y0, int8_t x1, int8_t y1, int8_t x2, int8_t y2, int16_t color){
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	b095      	sub	sp, #84	; 0x54
 800160c:	af06      	add	r7, sp, #24
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
	drawLine(x0, y0, x1, y1, color);
 8001622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa8a 	bl	8000b40 <__aeabi_i2f>
 800162c:	4604      	mov	r4, r0
 800162e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fa84 	bl	8000b40 <__aeabi_i2f>
 8001638:	4605      	mov	r5, r0
 800163a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa7e 	bl	8000b40 <__aeabi_i2f>
 8001644:	4606      	mov	r6, r0
 8001646:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fa78 	bl	8000b40 <__aeabi_i2f>
 8001650:	4602      	mov	r2, r0
 8001652:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4633      	mov	r3, r6
 800165c:	462a      	mov	r2, r5
 800165e:	4621      	mov	r1, r4
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff61 	bl	8001528 <_ZN10LcdDisplay8drawLineEfffft>
	drawLine(x0, y0, x2, y2, color);
 8001666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fa68 	bl	8000b40 <__aeabi_i2f>
 8001670:	4604      	mov	r4, r0
 8001672:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fa62 	bl	8000b40 <__aeabi_i2f>
 800167c:	4605      	mov	r5, r0
 800167e:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fa5c 	bl	8000b40 <__aeabi_i2f>
 8001688:	4606      	mov	r6, r0
 800168a:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa56 	bl	8000b40 <__aeabi_i2f>
 8001694:	4602      	mov	r2, r0
 8001696:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	4633      	mov	r3, r6
 80016a0:	462a      	mov	r2, r5
 80016a2:	4621      	mov	r1, r4
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff3f 	bl	8001528 <_ZN10LcdDisplay8drawLineEfffft>
	drawLine(x1, y1, x2, y2, color);
 80016aa:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fa46 	bl	8000b40 <__aeabi_i2f>
 80016b4:	4604      	mov	r4, r0
 80016b6:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa40 	bl	8000b40 <__aeabi_i2f>
 80016c0:	4605      	mov	r5, r0
 80016c2:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa3a 	bl	8000b40 <__aeabi_i2f>
 80016cc:	4606      	mov	r6, r0
 80016ce:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fa34 	bl	8000b40 <__aeabi_i2f>
 80016d8:	4602      	mov	r2, r0
 80016da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	4633      	mov	r3, r6
 80016e4:	462a      	mov	r2, r5
 80016e6:	4621      	mov	r1, r4
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff1d 	bl	8001528 <_ZN10LcdDisplay8drawLineEfffft>
	auto a10 = (y1 - y0)/((x1 - x0)*1.0);
 80016ee:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 80016f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fe7b 	bl	80003f4 <__aeabi_i2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe71 	bl	80003f4 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe ffff 	bl	800071c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	auto b10 = y1 - a10*x1;
 8001726:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe62 	bl	80003f4 <__aeabi_i2d>
 8001730:	4604      	mov	r4, r0
 8001732:	460d      	mov	r5, r1
 8001734:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe5b 	bl	80003f4 <__aeabi_i2d>
 800173e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001742:	f7fe fec1 	bl	80004c8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fd03 	bl	8000158 <__aeabi_dsub>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	auto a12 = (y1 - y2)/((x1 - x2)*1.0);
 800175a:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 800175e:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe45 	bl	80003f4 <__aeabi_i2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
 800176e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001772:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe3b 	bl	80003f4 <__aeabi_i2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ffc9 	bl	800071c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	auto b12 = (y1 - a12*x1);
 8001792:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe2c 	bl	80003f4 <__aeabi_i2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe25 	bl	80003f4 <__aeabi_i2d>
 80017aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ae:	f7fe fe8b 	bl	80004c8 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fccd 	bl	8000158 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	auto a20 = (y2 - y0)/((x2 - x0)*1.0);
 80017c6:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 80017ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe0f 	bl	80003f4 <__aeabi_i2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	f997 2054 	ldrsb.w	r2, [r7, #84]	; 0x54
 80017de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe05 	bl	80003f4 <__aeabi_i2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe ff93 	bl	800071c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	auto b20 = (y2 - a20*x2);
 80017fe:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdf6 	bl	80003f4 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdef 	bl	80003f4 <__aeabi_i2d>
 8001816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800181a:	f7fe fe55 	bl	80004c8 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	f7fe fc97 	bl	8000158 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(y0 <= y2 && y0 >= y1){
 8001832:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001836:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800183a:	429a      	cmp	r2, r3
 800183c:	dc52      	bgt.n	80018e4 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x2dc>
 800183e:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001842:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8001846:	429a      	cmp	r2, r3
 8001848:	db4c      	blt.n	80018e4 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x2dc>
		drawBottom(y2, y0, x0, a12, b12, a20, b20, color);
 800184a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800184e:	f7ff f86d 	bl	800092c <__aeabi_d2f>
 8001852:	4604      	mov	r4, r0
 8001854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001858:	f7ff f868 	bl	800092c <__aeabi_d2f>
 800185c:	4605      	mov	r5, r0
 800185e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001862:	f7ff f863 	bl	800092c <__aeabi_d2f>
 8001866:	4606      	mov	r6, r0
 8001868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186c:	f7ff f85e 	bl	800092c <__aeabi_d2f>
 8001870:	4684      	mov	ip, r0
 8001872:	f997 0003 	ldrsb.w	r0, [r7, #3]
 8001876:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800187a:	f997 1058 	ldrsb.w	r1, [r7, #88]	; 0x58
 800187e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001882:	9304      	str	r3, [sp, #16]
 8001884:	f8cd c00c 	str.w	ip, [sp, #12]
 8001888:	9602      	str	r6, [sp, #8]
 800188a:	9501      	str	r5, [sp, #4]
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	4603      	mov	r3, r0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f9dd 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y1, y0, x0, a12, b12, a10, b10, color);
 8001896:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800189a:	f7ff f847 	bl	800092c <__aeabi_d2f>
 800189e:	4604      	mov	r4, r0
 80018a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018a4:	f7ff f842 	bl	800092c <__aeabi_d2f>
 80018a8:	4605      	mov	r5, r0
 80018aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018ae:	f7ff f83d 	bl	800092c <__aeabi_d2f>
 80018b2:	4606      	mov	r6, r0
 80018b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018b8:	f7ff f838 	bl	800092c <__aeabi_d2f>
 80018bc:	4684      	mov	ip, r0
 80018be:	f997 0003 	ldrsb.w	r0, [r7, #3]
 80018c2:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80018c6:	f997 1050 	ldrsb.w	r1, [r7, #80]	; 0x50
 80018ca:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80018ce:	9304      	str	r3, [sp, #16]
 80018d0:	f8cd c00c 	str.w	ip, [sp, #12]
 80018d4:	9602      	str	r6, [sp, #8]
 80018d6:	9501      	str	r5, [sp, #4]
 80018d8:	9400      	str	r4, [sp, #0]
 80018da:	4603      	mov	r3, r0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fa55 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
 80018e2:	e1b0      	b.n	8001c46 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x63e>
	}
	else if(y0 <= y1 && y0 >= y2){
 80018e4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80018e8:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dc52      	bgt.n	8001996 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x38e>
 80018f0:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80018f4:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 80018f8:	429a      	cmp	r2, r3
 80018fa:	db4c      	blt.n	8001996 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x38e>
		drawBottom(y1, y0, x0, a12, b12, a10, b10, color);
 80018fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001900:	f7ff f814 	bl	800092c <__aeabi_d2f>
 8001904:	4604      	mov	r4, r0
 8001906:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190a:	f7ff f80f 	bl	800092c <__aeabi_d2f>
 800190e:	4605      	mov	r5, r0
 8001910:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001914:	f7ff f80a 	bl	800092c <__aeabi_d2f>
 8001918:	4606      	mov	r6, r0
 800191a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800191e:	f7ff f805 	bl	800092c <__aeabi_d2f>
 8001922:	4684      	mov	ip, r0
 8001924:	f997 0003 	ldrsb.w	r0, [r7, #3]
 8001928:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800192c:	f997 1050 	ldrsb.w	r1, [r7, #80]	; 0x50
 8001930:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001934:	9304      	str	r3, [sp, #16]
 8001936:	f8cd c00c 	str.w	ip, [sp, #12]
 800193a:	9602      	str	r6, [sp, #8]
 800193c:	9501      	str	r5, [sp, #4]
 800193e:	9400      	str	r4, [sp, #0]
 8001940:	4603      	mov	r3, r0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f984 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y2, y0, x0, a12, b12, a20, b20, color);
 8001948:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800194c:	f7fe ffee 	bl	800092c <__aeabi_d2f>
 8001950:	4604      	mov	r4, r0
 8001952:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001956:	f7fe ffe9 	bl	800092c <__aeabi_d2f>
 800195a:	4605      	mov	r5, r0
 800195c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001960:	f7fe ffe4 	bl	800092c <__aeabi_d2f>
 8001964:	4606      	mov	r6, r0
 8001966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196a:	f7fe ffdf 	bl	800092c <__aeabi_d2f>
 800196e:	4684      	mov	ip, r0
 8001970:	f997 0003 	ldrsb.w	r0, [r7, #3]
 8001974:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001978:	f997 1058 	ldrsb.w	r1, [r7, #88]	; 0x58
 800197c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001980:	9304      	str	r3, [sp, #16]
 8001982:	f8cd c00c 	str.w	ip, [sp, #12]
 8001986:	9602      	str	r6, [sp, #8]
 8001988:	9501      	str	r5, [sp, #4]
 800198a:	9400      	str	r4, [sp, #0]
 800198c:	4603      	mov	r3, r0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f9fc 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
 8001994:	e157      	b.n	8001c46 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x63e>
	}
	else if(y1 <= y2 && y1 >= y0){
 8001996:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 800199a:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 800199e:	429a      	cmp	r2, r3
 80019a0:	dc52      	bgt.n	8001a48 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x440>
 80019a2:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 80019a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	db4c      	blt.n	8001a48 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x440>
		drawBottom(y2, y1, x1, a12, b12, a20, b20, color);
 80019ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019b2:	f7fe ffbb 	bl	800092c <__aeabi_d2f>
 80019b6:	4604      	mov	r4, r0
 80019b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019bc:	f7fe ffb6 	bl	800092c <__aeabi_d2f>
 80019c0:	4605      	mov	r5, r0
 80019c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019c6:	f7fe ffb1 	bl	800092c <__aeabi_d2f>
 80019ca:	4606      	mov	r6, r0
 80019cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d0:	f7fe ffac 	bl	800092c <__aeabi_d2f>
 80019d4:	4684      	mov	ip, r0
 80019d6:	f997 0001 	ldrsb.w	r0, [r7, #1]
 80019da:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 80019de:	f997 1058 	ldrsb.w	r1, [r7, #88]	; 0x58
 80019e2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80019e6:	9304      	str	r3, [sp, #16]
 80019e8:	f8cd c00c 	str.w	ip, [sp, #12]
 80019ec:	9602      	str	r6, [sp, #8]
 80019ee:	9501      	str	r5, [sp, #4]
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	4603      	mov	r3, r0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f92b 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y0, y1, x1, a20, b20, a10, b10, color);
 80019fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019fe:	f7fe ff95 	bl	800092c <__aeabi_d2f>
 8001a02:	4604      	mov	r4, r0
 8001a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a08:	f7fe ff90 	bl	800092c <__aeabi_d2f>
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a12:	f7fe ff8b 	bl	800092c <__aeabi_d2f>
 8001a16:	4606      	mov	r6, r0
 8001a18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1c:	f7fe ff86 	bl	800092c <__aeabi_d2f>
 8001a20:	4684      	mov	ip, r0
 8001a22:	f997 0001 	ldrsb.w	r0, [r7, #1]
 8001a26:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 8001a2a:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001a2e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001a32:	9304      	str	r3, [sp, #16]
 8001a34:	f8cd c00c 	str.w	ip, [sp, #12]
 8001a38:	9602      	str	r6, [sp, #8]
 8001a3a:	9501      	str	r5, [sp, #4]
 8001a3c:	9400      	str	r4, [sp, #0]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f9a3 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
 8001a46:	e0fe      	b.n	8001c46 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x63e>
	}
	else if (y1 <= y0 && y1 >= y2){
 8001a48:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 8001a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dc52      	bgt.n	8001afa <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x4f2>
 8001a54:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 8001a58:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	db4c      	blt.n	8001afa <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x4f2>
		drawBottom(y0, y1, x1, a10, b10, a20, b20, color);
 8001a60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a64:	f7fe ff62 	bl	800092c <__aeabi_d2f>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6e:	f7fe ff5d 	bl	800092c <__aeabi_d2f>
 8001a72:	4605      	mov	r5, r0
 8001a74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a78:	f7fe ff58 	bl	800092c <__aeabi_d2f>
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a82:	f7fe ff53 	bl	800092c <__aeabi_d2f>
 8001a86:	4684      	mov	ip, r0
 8001a88:	f997 0001 	ldrsb.w	r0, [r7, #1]
 8001a8c:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 8001a90:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001a94:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001a98:	9304      	str	r3, [sp, #16]
 8001a9a:	f8cd c00c 	str.w	ip, [sp, #12]
 8001a9e:	9602      	str	r6, [sp, #8]
 8001aa0:	9501      	str	r5, [sp, #4]
 8001aa2:	9400      	str	r4, [sp, #0]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8d2 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y2, y1, x1, a20, b20, a12, b12, color);
 8001aac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ab0:	f7fe ff3c 	bl	800092c <__aeabi_d2f>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aba:	f7fe ff37 	bl	800092c <__aeabi_d2f>
 8001abe:	4605      	mov	r5, r0
 8001ac0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ac4:	f7fe ff32 	bl	800092c <__aeabi_d2f>
 8001ac8:	4606      	mov	r6, r0
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe ff2d 	bl	800092c <__aeabi_d2f>
 8001ad2:	4684      	mov	ip, r0
 8001ad4:	f997 0001 	ldrsb.w	r0, [r7, #1]
 8001ad8:	f997 2050 	ldrsb.w	r2, [r7, #80]	; 0x50
 8001adc:	f997 1058 	ldrsb.w	r1, [r7, #88]	; 0x58
 8001ae0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001ae4:	9304      	str	r3, [sp, #16]
 8001ae6:	f8cd c00c 	str.w	ip, [sp, #12]
 8001aea:	9602      	str	r6, [sp, #8]
 8001aec:	9501      	str	r5, [sp, #4]
 8001aee:	9400      	str	r4, [sp, #0]
 8001af0:	4603      	mov	r3, r0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f94a 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
 8001af8:	e0a5      	b.n	8001c46 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x63e>
	}
	else if(y2 <= y0 && y2 >= y1){
 8001afa:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001afe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dc52      	bgt.n	8001bac <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x5a4>
 8001b06:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001b0a:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	db4c      	blt.n	8001bac <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x5a4>
		drawBottom(y0, y2, x2, a10, b10, a20, b20, color);
 8001b12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b16:	f7fe ff09 	bl	800092c <__aeabi_d2f>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b20:	f7fe ff04 	bl	800092c <__aeabi_d2f>
 8001b24:	4605      	mov	r5, r0
 8001b26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2a:	f7fe feff 	bl	800092c <__aeabi_d2f>
 8001b2e:	4606      	mov	r6, r0
 8001b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b34:	f7fe fefa 	bl	800092c <__aeabi_d2f>
 8001b38:	4684      	mov	ip, r0
 8001b3a:	f997 0054 	ldrsb.w	r0, [r7, #84]	; 0x54
 8001b3e:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001b42:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001b46:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001b4a:	9304      	str	r3, [sp, #16]
 8001b4c:	f8cd c00c 	str.w	ip, [sp, #12]
 8001b50:	9602      	str	r6, [sp, #8]
 8001b52:	9501      	str	r5, [sp, #4]
 8001b54:	9400      	str	r4, [sp, #0]
 8001b56:	4603      	mov	r3, r0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f879 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y1, y2, x2, a10, b10, a12, b12, color);
 8001b5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b62:	f7fe fee3 	bl	800092c <__aeabi_d2f>
 8001b66:	4604      	mov	r4, r0
 8001b68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b6c:	f7fe fede 	bl	800092c <__aeabi_d2f>
 8001b70:	4605      	mov	r5, r0
 8001b72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b76:	f7fe fed9 	bl	800092c <__aeabi_d2f>
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b80:	f7fe fed4 	bl	800092c <__aeabi_d2f>
 8001b84:	4684      	mov	ip, r0
 8001b86:	f997 0054 	ldrsb.w	r0, [r7, #84]	; 0x54
 8001b8a:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001b8e:	f997 1050 	ldrsb.w	r1, [r7, #80]	; 0x50
 8001b92:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001b96:	9304      	str	r3, [sp, #16]
 8001b98:	f8cd c00c 	str.w	ip, [sp, #12]
 8001b9c:	9602      	str	r6, [sp, #8]
 8001b9e:	9501      	str	r5, [sp, #4]
 8001ba0:	9400      	str	r4, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8f1 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
 8001baa:	e04c      	b.n	8001c46 <_ZN10LcdDisplay12drawTriangleEaaaaaas+0x63e>
	}
	else{
		drawBottom(y1, y2, x2, a10, b10, a12, b12, color);
 8001bac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bb0:	f7fe febc 	bl	800092c <__aeabi_d2f>
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bba:	f7fe feb7 	bl	800092c <__aeabi_d2f>
 8001bbe:	4605      	mov	r5, r0
 8001bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bc4:	f7fe feb2 	bl	800092c <__aeabi_d2f>
 8001bc8:	4606      	mov	r6, r0
 8001bca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bce:	f7fe fead 	bl	800092c <__aeabi_d2f>
 8001bd2:	4684      	mov	ip, r0
 8001bd4:	f997 0054 	ldrsb.w	r0, [r7, #84]	; 0x54
 8001bd8:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001bdc:	f997 1050 	ldrsb.w	r1, [r7, #80]	; 0x50
 8001be0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001be4:	9304      	str	r3, [sp, #16]
 8001be6:	f8cd c00c 	str.w	ip, [sp, #12]
 8001bea:	9602      	str	r6, [sp, #8]
 8001bec:	9501      	str	r5, [sp, #4]
 8001bee:	9400      	str	r4, [sp, #0]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f82c 	bl	8001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>
		drawTop(y0, y2, x2, a10, b10, a20, b20, color);
 8001bf8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bfc:	f7fe fe96 	bl	800092c <__aeabi_d2f>
 8001c00:	4604      	mov	r4, r0
 8001c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c06:	f7fe fe91 	bl	800092c <__aeabi_d2f>
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c10:	f7fe fe8c 	bl	800092c <__aeabi_d2f>
 8001c14:	4606      	mov	r6, r0
 8001c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c1a:	f7fe fe87 	bl	800092c <__aeabi_d2f>
 8001c1e:	4684      	mov	ip, r0
 8001c20:	f997 0054 	ldrsb.w	r0, [r7, #84]	; 0x54
 8001c24:	f997 2058 	ldrsb.w	r2, [r7, #88]	; 0x58
 8001c28:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001c2c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001c30:	9304      	str	r3, [sp, #16]
 8001c32:	f8cd c00c 	str.w	ip, [sp, #12]
 8001c36:	9602      	str	r6, [sp, #8]
 8001c38:	9501      	str	r5, [sp, #4]
 8001c3a:	9400      	str	r4, [sp, #0]
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8a4 	bl	8001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>
	}
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	373c      	adds	r7, #60	; 0x3c
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c50 <_ZN10LcdDisplay10drawBottomEaaaffffs>:

void LcdDisplay::drawBottom(int8_t bottomY, int8_t currentY, int8_t currentX, float firstA, float firstB, float secondA, float secondB, int16_t color){
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	70fb      	strb	r3, [r7, #3]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70bb      	strb	r3, [r7, #2]
 8001c66:	4613      	mov	r3, r2
 8001c68:	707b      	strb	r3, [r7, #1]
	int firstX = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
	int secondX = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
	while(currentY < bottomY){
 8001c72:	e07c      	b.n	8001d6e <_ZN10LcdDisplay10drawBottomEaaaffffs+0x11e>
		if(isinff(firstA)){
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	4942      	ldr	r1, [pc, #264]	; (8001d88 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x138>)
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff f977 	bl	8000f74 <__aeabi_fcmpun>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d108      	bne.n	8001c9e <_ZN10LcdDisplay10drawBottomEaaaffffs+0x4e>
 8001c8c:	493e      	ldr	r1, [pc, #248]	; (8001d88 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x138>)
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff f952 	bl	8000f38 <__aeabi_fcmple>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <_ZN10LcdDisplay10drawBottomEaaaffffs+0x4e>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	b2eb      	uxtb	r3, r5
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x62>
			firstX = currentX;
 8001caa:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e014      	b.n	8001cdc <_ZN10LcdDisplay10drawBottomEaaaffffs+0x8c>
		}
		else{
			firstX = (currentY - firstB)/firstA;
 8001cb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_i2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fe87 	bl	80009d4 <__aeabi_fsub>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6a39      	ldr	r1, [r7, #32]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f840 	bl	8000d50 <__aeabi_fdiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f964 	bl	8000fa0 <__aeabi_f2iz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
		}
		if(isinff(secondB)){
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	4928      	ldr	r1, [pc, #160]	; (8001d88 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x138>)
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff f943 	bl	8000f74 <__aeabi_fcmpun>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <_ZN10LcdDisplay10drawBottomEaaaffffs+0xb6>
 8001cf4:	4924      	ldr	r1, [pc, #144]	; (8001d88 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x138>)
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff f91e 	bl	8000f38 <__aeabi_fcmple>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <_ZN10LcdDisplay10drawBottomEaaaffffs+0xb6>
 8001d02:	2300      	movs	r3, #0
 8001d04:	461d      	mov	r5, r3
 8001d06:	b2eb      	uxtb	r3, r5
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <_ZN10LcdDisplay10drawBottomEaaaffffs+0xca>
			secondX = currentX;
 8001d12:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	e014      	b.n	8001d44 <_ZN10LcdDisplay10drawBottomEaaaffffs+0xf4>
		}
		else{
			secondX = (currentY - secondB)/secondA;
 8001d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe ff0e 	bl	8000b40 <__aeabi_i2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fe53 	bl	80009d4 <__aeabi_fsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f80c 	bl	8000d50 <__aeabi_fdiv>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f930 	bl	8000fa0 <__aeabi_f2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60bb      	str	r3, [r7, #8]
		}
		drawHorizontalLine(firstX, currentY, secondX, currentY, color);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b259      	sxtb	r1, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	b258      	sxtb	r0, r3
 8001d4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d4e:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8b3 	bl	8001ec8 <_ZN10LcdDisplay18drawHorizontalLineEaaaat>
		currentY ++;
 8001d62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	70bb      	strb	r3, [r7, #2]
	while(currentY < bottomY){
 8001d6e:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	f6ff af7c 	blt.w	8001c74 <_ZN10LcdDisplay10drawBottomEaaaffffs+0x24>
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	7f7fffff 	.word	0x7f7fffff

08001d8c <_ZN10LcdDisplay7drawTopEaaaffffs>:

void LcdDisplay::drawTop(int8_t topY, int8_t currentY, int8_t currentX, float firstA, float firstB, float secondA, float secondB, int16_t color){
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	70fb      	strb	r3, [r7, #3]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70bb      	strb	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
	int firstX = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
	int secondX = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
	while(currentY > topY){
 8001dae:	e07c      	b.n	8001eaa <_ZN10LcdDisplay7drawTopEaaaffffs+0x11e>
		if(isinff(firstA)){
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001db6:	2301      	movs	r3, #1
 8001db8:	461d      	mov	r5, r3
 8001dba:	4942      	ldr	r1, [pc, #264]	; (8001ec4 <_ZN10LcdDisplay7drawTopEaaaffffs+0x138>)
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff f8d9 	bl	8000f74 <__aeabi_fcmpun>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d108      	bne.n	8001dda <_ZN10LcdDisplay7drawTopEaaaffffs+0x4e>
 8001dc8:	493e      	ldr	r1, [pc, #248]	; (8001ec4 <_ZN10LcdDisplay7drawTopEaaaffffs+0x138>)
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff f8b4 	bl	8000f38 <__aeabi_fcmple>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <_ZN10LcdDisplay7drawTopEaaaffffs+0x4e>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	461d      	mov	r5, r3
 8001dda:	b2eb      	uxtb	r3, r5
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <_ZN10LcdDisplay7drawTopEaaaffffs+0x62>
			firstX = currentX;
 8001de6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e014      	b.n	8001e18 <_ZN10LcdDisplay7drawTopEaaaffffs+0x8c>
		}
		else{
			firstX = (currentY - firstB)/firstA;
 8001dee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fea4 	bl	8000b40 <__aeabi_i2f>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fde9 	bl	80009d4 <__aeabi_fsub>
 8001e02:	4603      	mov	r3, r0
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ffa2 	bl	8000d50 <__aeabi_fdiv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f8c6 	bl	8000fa0 <__aeabi_f2iz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]
		}
		if(isinff(secondB)){
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001e1e:	2301      	movs	r3, #1
 8001e20:	461d      	mov	r5, r3
 8001e22:	4928      	ldr	r1, [pc, #160]	; (8001ec4 <_ZN10LcdDisplay7drawTopEaaaffffs+0x138>)
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff f8a5 	bl	8000f74 <__aeabi_fcmpun>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <_ZN10LcdDisplay7drawTopEaaaffffs+0xb6>
 8001e30:	4924      	ldr	r1, [pc, #144]	; (8001ec4 <_ZN10LcdDisplay7drawTopEaaaffffs+0x138>)
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff f880 	bl	8000f38 <__aeabi_fcmple>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <_ZN10LcdDisplay7drawTopEaaaffffs+0xb6>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	461d      	mov	r5, r3
 8001e42:	b2eb      	uxtb	r3, r5
 8001e44:	f083 0301 	eor.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <_ZN10LcdDisplay7drawTopEaaaffffs+0xca>
			secondX = currentX;
 8001e4e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	e014      	b.n	8001e80 <_ZN10LcdDisplay7drawTopEaaaffffs+0xf4>
		}
		else{
			secondX = (currentY - secondB)/secondA;
 8001e56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fe70 	bl	8000b40 <__aeabi_i2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fdb5 	bl	80009d4 <__aeabi_fsub>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff6e 	bl	8000d50 <__aeabi_fdiv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f892 	bl	8000fa0 <__aeabi_f2iz>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60bb      	str	r3, [r7, #8]
		}
		drawHorizontalLine(firstX, currentY, secondX, currentY, color);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	b259      	sxtb	r1, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	b258      	sxtb	r0, r3
 8001e88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e8a:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4603      	mov	r3, r0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f815 	bl	8001ec8 <_ZN10LcdDisplay18drawHorizontalLineEaaaat>
		currentY --;
 8001e9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	70bb      	strb	r3, [r7, #2]
	while(currentY > topY){
 8001eaa:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	f73f af7c 	bgt.w	8001db0 <_ZN10LcdDisplay7drawTopEaaaffffs+0x24>
	}
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	7f7fffff 	.word	0x7f7fffff

08001ec8 <_ZN10LcdDisplay18drawHorizontalLineEaaaat>:

void LcdDisplay::drawHorizontalLine(int8_t xb, int8_t yb, int8_t xe, int8_t ye, uint16_t color){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	70fb      	strb	r3, [r7, #3]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70bb      	strb	r3, [r7, #2]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	707b      	strb	r3, [r7, #1]
	int8_t end = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
	int8_t start = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73bb      	strb	r3, [r7, #14]
	if (xb > xe){
 8001eea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001eee:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dd04      	ble.n	8001f00 <_ZN10LcdDisplay18drawHorizontalLineEaaaat+0x38>
		end = xb;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	73fb      	strb	r3, [r7, #15]
		start = xe;
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	73bb      	strb	r3, [r7, #14]
 8001efe:	e012      	b.n	8001f26 <_ZN10LcdDisplay18drawHorizontalLineEaaaat+0x5e>
	}else{
		end = xe;
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	73fb      	strb	r3, [r7, #15]
		start = xb;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	73bb      	strb	r3, [r7, #14]
	}
	while(start <= end){
 8001f08:	e00d      	b.n	8001f26 <_ZN10LcdDisplay18drawHorizontalLineEaaaat+0x5e>
		putPixel(start, ye, color);
 8001f0a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001f0e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8001f12:	8bbb      	ldrh	r3, [r7, #28]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fa05 	bl	8001324 <_ZN10LcdDisplay8putPixelEiit>
		start++;
 8001f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	73bb      	strb	r3, [r7, #14]
	while(start <= end){
 8001f26:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	ddeb      	ble.n	8001f0a <_ZN10LcdDisplay18drawHorizontalLineEaaaat+0x42>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN10LcdDisplay10drawNumberEaat>:
void LcdDisplay::drawNumber(int8_t x, int8_t y, uint16_t color){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	70fb      	strb	r3, [r7, #3]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70bb      	strb	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	803b      	strh	r3, [r7, #0]
//	for(int i = 0; i < 5*8; i++){
//		if(zero[i]){
//			putPixel(x + i%5, y+ int(i/5), color);
//		}
//	}
	for(int i = 0; i < 8; i++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e012      	b.n	8001f82 <_ZN10LcdDisplay10drawNumberEaat+0x46>
		printRow(i, x, y+i, color);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	b2d9      	uxtb	r1, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	78bb      	ldrb	r3, [r7, #2]
 8001f66:	4413      	add	r3, r2
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	b258      	sxtb	r0, r3
 8001f6c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001f70:	883b      	ldrh	r3, [r7, #0]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4603      	mov	r3, r0
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f80c 	bl	8001f94 <_ZN10LcdDisplay8printRowEhaat>
	for(int i = 0; i < 8; i++){
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	dde9      	ble.n	8001f5c <_ZN10LcdDisplay10drawNumberEaat+0x20>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <_ZN10LcdDisplay8printRowEhaat>:

void LcdDisplay::printRow(uint8_t ronType, int8_t x, int8_t y, uint16_t color){
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b090      	sub	sp, #64	; 0x40
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	70fb      	strb	r3, [r7, #3]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70bb      	strb	r3, [r7, #2]
 8001faa:	4613      	mov	r3, r2
 8001fac:	707b      	strb	r3, [r7, #1]
	bool zeros[8][5] = {{0, 1, 1, 1, 0},
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <_ZN10LcdDisplay8printRowEhaat+0x94>)
 8001fb0:	f107 0408 	add.w	r4, r7, #8
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fc2:	e884 0003 	stmia.w	r4, {r0, r1}
			{1, 0, 0, 0, 1},
			{1, 0, 0, 0, 1},
			{1, 0, 0, 0, 1},
			{1, 1, 0, 1, 1},
			{0, 1, 1, 1, 0}};
	for(auto pixel : zeros[ronType]){
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	f107 0108 	add.w	r1, r7, #8
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	3305      	adds	r3, #5
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	e019      	b.n	8002016 <_ZN10LcdDisplay8printRowEhaat+0x82>
 8001fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(pixel)
 8001fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <_ZN10LcdDisplay8printRowEhaat+0x70>
			putPixel(x, y, color);
 8001ff2:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8001ff6:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff f990 	bl	8001324 <_ZN10LcdDisplay8putPixelEiit>
		x++;
 8002004:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	70bb      	strb	r3, [r7, #2]
	for(auto pixel : zeros[ronType]){
 8002010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002012:	3301      	adds	r3, #1
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	429a      	cmp	r2, r3
 800201c:	d1e1      	bne.n	8001fe2 <_ZN10LcdDisplay8printRowEhaat+0x4e>
	}
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3740      	adds	r7, #64	; 0x40
 8002024:	46bd      	mov	sp, r7
 8002026:	bdb0      	pop	{r4, r5, r7, pc}
 8002028:	08003cd0 	.word	0x08003cd0

0800202c <_ZN10LcdDisplayD1Ev>:

LcdDisplay::~LcdDisplay() {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <_ZN10LcdDisplayD1Ev+0x1c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	08003d00 	.word	0x08003d00

0800204c <_ZN10LcdDisplayD0Ev>:
LcdDisplay::~LcdDisplay() {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
}
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffe9 	bl	800202c <_ZN10LcdDisplayD1Ev>
 800205a:	2104      	movs	r1, #4
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f001 fd43 	bl	8003ae8 <_ZdlPvj>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <MX_GPIO_Init+0x104>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <MX_GPIO_Init+0x104>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b38      	ldr	r3, [pc, #224]	; (8002170 <MX_GPIO_Init+0x104>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <MX_GPIO_Init+0x104>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <MX_GPIO_Init+0x104>)
 800209e:	f043 0320 	orr.w	r3, r3, #32
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <MX_GPIO_Init+0x104>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <MX_GPIO_Init+0x104>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <MX_GPIO_Init+0x104>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <MX_GPIO_Init+0x104>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <MX_GPIO_Init+0x104>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <MX_GPIO_Init+0x104>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <MX_GPIO_Init+0x104>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2120      	movs	r1, #32
 80020e4:	4823      	ldr	r0, [pc, #140]	; (8002174 <MX_GPIO_Init+0x108>)
 80020e6:	f000 fd69 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	f640 0104 	movw	r1, #2052	; 0x804
 80020f0:	4821      	ldr	r0, [pc, #132]	; (8002178 <MX_GPIO_Init+0x10c>)
 80020f2:	f000 fd63 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fc:	481e      	ldr	r0, [pc, #120]	; (8002178 <MX_GPIO_Init+0x10c>)
 80020fe:	f000 fd5d 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_GPIO_Init+0x110>)
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	481a      	ldr	r0, [pc, #104]	; (8002180 <MX_GPIO_Init+0x114>)
 8002118:	f000 fbcc 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800211c:	2320      	movs	r3, #32
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <MX_GPIO_Init+0x108>)
 8002134:	f000 fbbe 	bl	80028b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8002138:	f641 0304 	movw	r3, #6148	; 0x1804
 800213c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	4809      	ldr	r0, [pc, #36]	; (8002178 <MX_GPIO_Init+0x10c>)
 8002152:	f000 fbaf 	bl	80028b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2028      	movs	r0, #40	; 0x28
 800215c:	f000 fb73 	bl	8002846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002160:	2028      	movs	r0, #40	; 0x28
 8002162:	f000 fb8c 	bl	800287e <HAL_NVIC_EnableIRQ>

}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00
 800217c:	10110000 	.word	0x10110000
 8002180:	40011000 	.word	0x40011000

08002184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218a:	f000 f9ff 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218e:	f000 f83d 	bl	800220c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002192:	f7ff ff6b 	bl	800206c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002196:	f000 f96b 	bl	8002470 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800219a:	f000 f88b 	bl	80022b4 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LcdDisplay display = LcdDisplay();
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff71 	bl	8001088 <_ZN10LcdDisplayC1Ev>
//  for (int y = 0; y < LcdDisplay::LCD_HEIGHT; y++) {
//    for (int x = 0; x < LcdDisplay::LCD_WIDTH; x++) {
//    	display.putPixel(x, y, WHITE);
//    }
//  }
display.drawRectangle(0, 0, LcdDisplay::LCD_HEIGHT, LcdDisplay::LCD_WIDTH, WHITE);
 80021a6:	1d38      	adds	r0, r7, #4
 80021a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2350      	movs	r3, #80	; 0x50
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2350      	movs	r3, #80	; 0x50
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	f7ff f90e 	bl	80013d8 <_ZN10LcdDisplay13drawRectangleEaaaat>
//  display.drawFilledCircle(20, 20, 20, BLUE);
  display.drawTriangle(10, 10, 50, 60, 10, 30, BLACK);
 80021bc:	1d38      	adds	r0, r7, #4
 80021be:	2300      	movs	r3, #0
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	231e      	movs	r3, #30
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	230a      	movs	r3, #10
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	233c      	movs	r3, #60	; 0x3c
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2332      	movs	r3, #50	; 0x32
 80021d0:	220a      	movs	r2, #10
 80021d2:	210a      	movs	r1, #10
 80021d4:	f7ff fa18 	bl	8001608 <_ZN10LcdDisplay12drawTriangleEaaaaaas>

  display.fadedRectangle(60, 60, 15, 45, GREEN, BLUE);
 80021d8:	1d38      	adds	r0, r7, #4
 80021da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	f24e 0307 	movw	r3, #57351	; 0xe007
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	232d      	movs	r3, #45	; 0x2d
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	230f      	movs	r3, #15
 80021ec:	223c      	movs	r2, #60	; 0x3c
 80021ee:	213c      	movs	r1, #60	; 0x3c
 80021f0:	f7ff f926 	bl	8001440 <_ZN10LcdDisplay14fadedRectangleEaaaatt>
  display.drawNumber(40, 10, GREEN);
 80021f4:	1d38      	adds	r0, r7, #4
 80021f6:	f24e 0307 	movw	r3, #57351	; 0xe007
 80021fa:	220a      	movs	r2, #10
 80021fc:	2128      	movs	r1, #40	; 0x28
 80021fe:	f7ff fe9d 	bl	8001f3c <_ZN10LcdDisplay10drawNumberEaat>
//
//  display.drawLine(10, 40, 40, 40, CYAN);

  display.show();
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f8b3 	bl	8001370 <_ZN10LcdDisplay4showEv>

  while (1)
 800220a:	e7fe      	b.n	800220a <main+0x86>

0800220c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b090      	sub	sp, #64	; 0x40
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2228      	movs	r2, #40	; 0x28
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fc7c 	bl	8003b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002232:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	2301      	movs	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002240:	2302      	movs	r3, #2
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800224a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fceb 	bl	8002c30 <HAL_RCC_OscConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800226a:	f000 f81e 	bl	80022aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800226e:	230f      	movs	r3, #15
 8002270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002272:	2302      	movs	r3, #2
 8002274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 ff53 	bl	8003134 <HAL_RCC_ClockConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800229e:	f000 f804 	bl	80022aa <Error_Handler>
  }
}
 80022a2:	bf00      	nop
 80022a4:	3740      	adds	r7, #64	; 0x40
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ae:	b672      	cpsid	i
}
 80022b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <Error_Handler+0x8>

080022b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_SPI2_Init+0x64>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <MX_SPI2_Init+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_SPI2_Init+0x64>)
 80022c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI2_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_SPI2_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_SPI2_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI2_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_SPI2_Init+0x64>)
 80022e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI2_Init+0x64>)
 80022e8:	2210      	movs	r2, #16
 80022ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <MX_SPI2_Init+0x64>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI2_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_SPI2_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI2_Init+0x64>)
 8002300:	220a      	movs	r2, #10
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_SPI2_Init+0x64>)
 8002306:	f001 f8a3 	bl	8003450 <HAL_SPI_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002310:	f7ff ffcb 	bl	80022aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20003278 	.word	0x20003278
 800231c:	40003800 	.word	0x40003800

08002320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_SPI_MspInit+0x74>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d124      	bne.n	800238a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_SPI_MspInit+0x78>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_SPI_MspInit+0x78>)
 8002346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234a:	61d3      	str	r3, [r2, #28]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_SPI_MspInit+0x78>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_SPI_MspInit+0x78>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_SPI_MspInit+0x78>)
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_SPI_MspInit+0x78>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002370:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_SPI_MspInit+0x7c>)
 8002386:	f000 fa95 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40003800 	.word	0x40003800
 8002398:	40021000 	.word	0x40021000
 800239c:	40010c00 	.word	0x40010c00

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_MspInit+0x5c>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_MspInit+0x5c>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_MspInit+0x5c>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_MspInit+0x5c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_MspInit+0x5c>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_MspInit+0x5c>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_MspInit+0x60>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_MspInit+0x60>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <NMI_Handler+0x4>

0800240a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler+0x4>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <UsageFault_Handler+0x4>

08002422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244a:	f000 f8e5 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}

08002452 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002456:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800245a:	f000 fbc7 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}

08002462 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <MX_USART2_UART_Init+0x50>)
 8002478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_USART2_UART_Init+0x4c>)
 80024a8:	f001 fa40 	bl	800392c <HAL_UART_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024b2:	f7ff fefa 	bl	80022aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200032d0 	.word	0x200032d0
 80024c0:	40004400 	.word	0x40004400

080024c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <HAL_UART_MspInit+0x70>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d123      	bne.n	800252c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_UART_MspInit+0x74>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_UART_MspInit+0x74>)
 80024ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ee:	61d3      	str	r3, [r2, #28]
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_UART_MspInit+0x74>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_UART_MspInit+0x74>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_UART_MspInit+0x74>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_UART_MspInit+0x74>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002514:	230c      	movs	r3, #12
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2302      	movs	r3, #2
 800251e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4619      	mov	r1, r3
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <HAL_UART_MspInit+0x78>)
 8002528:	f000 f9c4 	bl	80028b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800252c:	bf00      	nop
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40004400 	.word	0x40004400
 8002538:	40021000 	.word	0x40021000
 800253c:	40010800 	.word	0x40010800

08002540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002540:	f7ff ff8f 	bl	8002462 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002546:	490c      	ldr	r1, [pc, #48]	; (8002578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <LoopFillZerobss+0x16>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800255c:	4c09      	ldr	r4, [pc, #36]	; (8002584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256a:	f001 fadd 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800256e:	f7ff fe09 	bl	8002184 <main>
  bx lr
 8002572:	4770      	bx	lr
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800257c:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 8002580:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002584:	2000345c 	.word	0x2000345c

08002588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC1_2_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x28>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x28>)
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 f947 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fefa 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f95f 	bl	800289a <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 f927 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	20000008 	.word	0x20000008
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_IncTick+0x1c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x20>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_IncTick+0x20>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000008 	.word	0x20000008
 8002638:	20003318 	.word	0x20003318

0800263c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b02      	ldr	r3, [pc, #8]	; (800264c <HAL_GetTick+0x10>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20003318 	.word	0x20003318

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff fff0 	bl	800263c <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffe0 	bl	800263c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000008 	.word	0x20000008

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4906      	ldr	r1, [pc, #24]	; (8002730 <__NVIC_EnableIRQ+0x34>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff90 	bl	8002734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff2d 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff42 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff90 	bl	8002788 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5f 	bl	8002734 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff35 	bl	80026fc <__NVIC_EnableIRQ>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffa2 	bl	80027ec <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c6:	e169      	b.n	8002b9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c8:	2201      	movs	r2, #1
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 8158 	bne.w	8002b96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a9a      	ldr	r2, [pc, #616]	; (8002b54 <HAL_GPIO_Init+0x2a0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d05e      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 80028f0:	4a98      	ldr	r2, [pc, #608]	; (8002b54 <HAL_GPIO_Init+0x2a0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d875      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 80028f6:	4a98      	ldr	r2, [pc, #608]	; (8002b58 <HAL_GPIO_Init+0x2a4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d058      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 80028fc:	4a96      	ldr	r2, [pc, #600]	; (8002b58 <HAL_GPIO_Init+0x2a4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d86f      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 8002902:	4a96      	ldr	r2, [pc, #600]	; (8002b5c <HAL_GPIO_Init+0x2a8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d052      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002908:	4a94      	ldr	r2, [pc, #592]	; (8002b5c <HAL_GPIO_Init+0x2a8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d869      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800290e:	4a94      	ldr	r2, [pc, #592]	; (8002b60 <HAL_GPIO_Init+0x2ac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04c      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002914:	4a92      	ldr	r2, [pc, #584]	; (8002b60 <HAL_GPIO_Init+0x2ac>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d863      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800291a:	4a92      	ldr	r2, [pc, #584]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d046      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
 8002920:	4a90      	ldr	r2, [pc, #576]	; (8002b64 <HAL_GPIO_Init+0x2b0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d85d      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 8002926:	2b12      	cmp	r3, #18
 8002928:	d82a      	bhi.n	8002980 <HAL_GPIO_Init+0xcc>
 800292a:	2b12      	cmp	r3, #18
 800292c:	d859      	bhi.n	80029e2 <HAL_GPIO_Init+0x12e>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_GPIO_Init+0x80>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	080029af 	.word	0x080029af
 8002938:	08002989 	.word	0x08002989
 800293c:	0800299b 	.word	0x0800299b
 8002940:	080029dd 	.word	0x080029dd
 8002944:	080029e3 	.word	0x080029e3
 8002948:	080029e3 	.word	0x080029e3
 800294c:	080029e3 	.word	0x080029e3
 8002950:	080029e3 	.word	0x080029e3
 8002954:	080029e3 	.word	0x080029e3
 8002958:	080029e3 	.word	0x080029e3
 800295c:	080029e3 	.word	0x080029e3
 8002960:	080029e3 	.word	0x080029e3
 8002964:	080029e3 	.word	0x080029e3
 8002968:	080029e3 	.word	0x080029e3
 800296c:	080029e3 	.word	0x080029e3
 8002970:	080029e3 	.word	0x080029e3
 8002974:	080029e3 	.word	0x080029e3
 8002978:	08002991 	.word	0x08002991
 800297c:	080029a5 	.word	0x080029a5
 8002980:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_GPIO_Init+0x2b4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002986:	e02c      	b.n	80029e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	623b      	str	r3, [r7, #32]
          break;
 800298e:	e029      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	623b      	str	r3, [r7, #32]
          break;
 8002998:	e024      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	3308      	adds	r3, #8
 80029a0:	623b      	str	r3, [r7, #32]
          break;
 80029a2:	e01f      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	330c      	adds	r3, #12
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e01a      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029b6:	2304      	movs	r3, #4
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e013      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	611a      	str	r2, [r3, #16]
          break;
 80029ce:	e009      	b.n	80029e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d0:	2308      	movs	r3, #8
 80029d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	615a      	str	r2, [r3, #20]
          break;
 80029da:	e003      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
          break;
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x130>
          break;
 80029e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d801      	bhi.n	80029ee <HAL_GPIO_Init+0x13a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_Init+0x13e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2bff      	cmp	r3, #255	; 0xff
 80029f8:	d802      	bhi.n	8002a00 <HAL_GPIO_Init+0x14c>
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x152>
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	3b08      	subs	r3, #8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	210f      	movs	r1, #15
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	6a39      	ldr	r1, [r7, #32]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80b1 	beq.w	8002b96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a34:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HAL_GPIO_Init+0x2b8>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_GPIO_Init+0x2bc>)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <HAL_GPIO_Init+0x2c0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_GPIO_Init+0x1ec>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_GPIO_Init+0x2c4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00d      	beq.n	8002a9c <HAL_GPIO_Init+0x1e8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <HAL_GPIO_Init+0x2c8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0x1e4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_GPIO_Init+0x2cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_GPIO_Init+0x1e0>
 8002a90:	2303      	movs	r3, #3
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e004      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e002      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_GPIO_Init+0x1ee>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ab2:	492f      	ldr	r1, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x2bc>)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	492c      	ldr	r1, [pc, #176]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	4928      	ldr	r1, [pc, #160]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	491e      	ldr	r1, [pc, #120]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4918      	ldr	r1, [pc, #96]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d021      	beq.n	8002b88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	490e      	ldr	r1, [pc, #56]	; (8002b84 <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e021      	b.n	8002b96 <HAL_GPIO_Init+0x2e2>
 8002b52:	bf00      	nop
 8002b54:	10320000 	.word	0x10320000
 8002b58:	10310000 	.word	0x10310000
 8002b5c:	10220000 	.word	0x10220000
 8002b60:	10210000 	.word	0x10210000
 8002b64:	10120000 	.word	0x10120000
 8002b68:	10110000 	.word	0x10110000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40010800 	.word	0x40010800
 8002b78:	40010c00 	.word	0x40010c00
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	40011400 	.word	0x40011400
 8002b84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_GPIO_Init+0x304>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <HAL_GPIO_Init+0x304>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3301      	adds	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f ae8e 	bne.w	80028c8 <HAL_GPIO_Init+0x14>
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	372c      	adds	r7, #44	; 0x2c
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40010400 	.word	0x40010400

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f806 	bl	8002c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e272      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8087 	beq.w	8002d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c50:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c5c:	4b8f      	ldr	r3, [pc, #572]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d112      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
 8002c68:	4b8c      	ldr	r3, [pc, #560]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c76:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d06c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x12c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d168      	bne.n	8002d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e24c      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x76>
 8002c98:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a7f      	ldr	r2, [pc, #508]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x98>
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7a      	ldr	r2, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b78      	ldr	r3, [pc, #480]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a77      	ldr	r2, [pc, #476]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0xbc>
 8002cd2:	4b72      	ldr	r3, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a71      	ldr	r2, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cec:	4b6b      	ldr	r3, [pc, #428]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a67      	ldr	r2, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff fc96 	bl	800263c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff fc92 	bl	800263c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e200      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe4>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff fc82 	bl	800263c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fc7e 	bl	800263c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1ec      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x10c>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d063      	beq.n	8002e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d11c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x18c>
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x176>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1c0      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4939      	ldr	r1, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	e03a      	b.n	8002e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff fc37 	bl	800263c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fc33 	bl	800263c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1a1      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4927      	ldr	r1, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e015      	b.n	8002e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCC_OscConfig+0x270>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fc16 	bl	800263c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7ff fc12 	bl	800263c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e180      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d03a      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d019      	beq.n	8002e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7ff fbf6 	bl	800263c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7ff fbf2 	bl	800263c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e160      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f000 face 	bl	8003414 <RCC_Delay>
 8002e78:	e01c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7ff fbdc 	bl	800263c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7ff fbd8 	bl	800263c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d908      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e146      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	42420000 	.word	0x42420000
 8002ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e9      	bne.n	8002e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a6 	beq.w	800300e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a87      	ldr	r2, [pc, #540]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	61d3      	str	r3, [r2, #28]
 8002ede:	4b85      	ldr	r3, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b82      	ldr	r3, [pc, #520]	; (80030f8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <HAL_RCC_OscConfig+0x4c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7e      	ldr	r2, [pc, #504]	; (80030f8 <HAL_RCC_OscConfig+0x4c8>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7ff fb99 	bl	800263c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7ff fb95 	bl	800263c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e103      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <HAL_RCC_OscConfig+0x4c8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x312>
 8002f34:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	e02d      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x334>
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a69      	ldr	r2, [pc, #420]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a66      	ldr	r2, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6213      	str	r3, [r2, #32]
 8002f62:	e01c      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCC_OscConfig+0x356>
 8002f6c:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4a60      	ldr	r2, [pc, #384]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6213      	str	r3, [r2, #32]
 8002f78:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6213      	str	r3, [r2, #32]
 8002f84:	e00b      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a5a      	ldr	r2, [pc, #360]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a57      	ldr	r2, [pc, #348]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d015      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff fb49 	bl	800263c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7ff fb45 	bl	800263c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0b1      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ee      	beq.n	8002fae <HAL_RCC_OscConfig+0x37e>
 8002fd0:	e014      	b.n	8002ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff fb33 	bl	800263c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7ff fb2f 	bl	800263c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e09b      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ee      	bne.n	8002fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8087 	beq.w	8003126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003018:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d061      	beq.n	80030e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d146      	bne.n	80030ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b33      	ldr	r3, [pc, #204]	; (80030fc <HAL_RCC_OscConfig+0x4cc>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7ff fb03 	bl	800263c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff faff 	bl	800263c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e06d      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	4921      	ldr	r1, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a19      	ldr	r1, [r3, #32]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	430b      	orrs	r3, r1
 8003086:	491b      	ldr	r1, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_OscConfig+0x4cc>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7ff fad3 	bl	800263c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7ff facf 	bl	800263c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e03d      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x46a>
 80030b8:	e035      	b.n	8003126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_RCC_OscConfig+0x4cc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fabc 	bl	800263c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7ff fab8 	bl	800263c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e026      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x498>
 80030e6:	e01e      	b.n	8003126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e019      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
 80030fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_OscConfig+0x500>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	429a      	cmp	r2, r3
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0d0      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4965      	ldr	r1, [pc, #404]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b8      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003190:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800319a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	494d      	ldr	r1, [pc, #308]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d040      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d115      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e073      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e06b      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4936      	ldr	r1, [pc, #216]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7ff fa0a 	bl	800263c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7ff fa06 	bl	800263c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e053      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d210      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0207 	bic.w	r2, r3, #7
 800326a:	4922      	ldr	r1, [pc, #136]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e032      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4916      	ldr	r1, [pc, #88]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	490e      	ldr	r1, [pc, #56]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c2:	f000 f821 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	490a      	ldr	r1, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1cc>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f968 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08003d08 	.word	0x08003d08
 8003300:	20000000 	.word	0x20000000
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <HAL_RCC_GetSysClockFreq+0x94>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x30>
 8003332:	2b08      	cmp	r3, #8
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x36>
 8003336:	e027      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800333a:	613b      	str	r3, [r7, #16]
      break;
 800333c:	e027      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0c9b      	lsrs	r3, r3, #18
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003348:	5cd3      	ldrb	r3, [r2, r3]
 800334a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_GetSysClockFreq+0x94>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800336a:	fb03 f202 	mul.w	r2, r3, r2
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e004      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	613b      	str	r3, [r7, #16]
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800338a:	613b      	str	r3, [r7, #16]
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	693b      	ldr	r3, [r7, #16]
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	007a1200 	.word	0x007a1200
 80033a4:	08003d20 	.word	0x08003d20
 80033a8:	08003d30 	.word	0x08003d30
 80033ac:	003d0900 	.word	0x003d0900

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff2 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08003d18 	.word	0x08003d18

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	08003d18 	.word	0x08003d18

08003414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <RCC_Delay+0x34>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0a      	ldr	r2, [pc, #40]	; (800344c <RCC_Delay+0x38>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a5b      	lsrs	r3, r3, #9
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003430:	bf00      	nop
  }
  while (Delay --);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	60fa      	str	r2, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <RCC_Delay+0x1c>
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	20000000 	.word	0x20000000
 800344c:	10624dd3 	.word	0x10624dd3

08003450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e076      	b.n	8003550 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d108      	bne.n	800347c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003472:	d009      	beq.n	8003488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	61da      	str	r2, [r3, #28]
 800347a:	e005      	b.n	8003488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe ff3c 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	ea42 0103 	orr.w	r1, r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	0c1a      	lsrs	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f002 0204 	and.w	r2, r2, #4
 800352e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_SPI_Transmit+0x22>
 8003576:	2302      	movs	r3, #2
 8003578:	e12d      	b.n	80037d6 <HAL_SPI_Transmit+0x27e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003582:	f7ff f85b 	bl	800263c <HAL_GetTick>
 8003586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d002      	beq.n	800359e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800359c:	e116      	b.n	80037cc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_Transmit+0x52>
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ae:	e10d      	b.n	80037cc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d10f      	bne.n	8003618 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d007      	beq.n	8003636 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363e:	d14f      	bne.n	80036e0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_SPI_Transmit+0xf6>
 8003648:	8afb      	ldrh	r3, [r7, #22]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d142      	bne.n	80036d4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	1c9a      	adds	r2, r3, #2
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003672:	e02f      	b.n	80036d4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d112      	bne.n	80036a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	1c9a      	adds	r2, r3, #2
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a6:	e015      	b.n	80036d4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a8:	f7fe ffc8 	bl	800263c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d803      	bhi.n	80036c0 <HAL_SPI_Transmit+0x168>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Transmit+0x16e>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80036d2:	e07b      	b.n	80037cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ca      	bne.n	8003674 <HAL_SPI_Transmit+0x11c>
 80036de:	e050      	b.n	8003782 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x196>
 80036e8:	8afb      	ldrh	r3, [r7, #22]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d144      	bne.n	8003778 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003714:	e030      	b.n	8003778 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d113      	bne.n	800374c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	86da      	strh	r2, [r3, #54]	; 0x36
 800374a:	e015      	b.n	8003778 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800374c:	f7fe ff76 	bl	800263c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d803      	bhi.n	8003764 <HAL_SPI_Transmit+0x20c>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d102      	bne.n	800376a <HAL_SPI_Transmit+0x212>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003776:	e029      	b.n	80037cc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1c9      	bne.n	8003716 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8b2 	bl	80038f0 <SPI_EndRxTxTransaction>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e003      	b.n	80037cc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f0:	f7fe ff24 	bl	800263c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003800:	f7fe ff1c 	bl	800263c <HAL_GetTick>
 8003804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	e054      	b.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d050      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003820:	f7fe ff0c 	bl	800263c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d902      	bls.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d13d      	bne.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800384e:	d111      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	d004      	beq.n	8003864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d107      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387c:	d10f      	bne.n	800389e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e017      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3b01      	subs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d19b      	bne.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000

080038f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2200      	movs	r2, #0
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff ff6a 	bl	80037e0 <SPI_WaitFlagStateUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e000      	b.n	8003924 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e042      	b.n	80039c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fe fdb6 	bl	80024c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f82b 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7ff fcda 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff fcc2 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	0119      	lsls	r1, r3, #4
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4419      	add	r1, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <_ZdlPvj>:
 8003ae8:	f000 b800 	b.w	8003aec <_ZdlPv>

08003aec <_ZdlPv>:
 8003aec:	f000 b800 	b.w	8003af0 <free>

08003af0 <free>:
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <free+0xc>)
 8003af2:	4601      	mov	r1, r0
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f000 b84b 	b.w	8003b90 <_free_r>
 8003afa:	bf00      	nop
 8003afc:	20000058 	.word	0x20000058

08003b00 <__malloc_lock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__malloc_lock+0x8>)
 8003b02:	f000 b835 	b.w	8003b70 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	20003458 	.word	0x20003458

08003b0c <__malloc_unlock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__malloc_unlock+0x8>)
 8003b0e:	f000 b830 	b.w	8003b72 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	20003458 	.word	0x20003458

08003b18 <memset>:
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4402      	add	r2, r0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	f803 1b01 	strb.w	r1, [r3], #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	4d0c      	ldr	r5, [pc, #48]	; (8003b60 <__libc_init_array+0x38>)
 8003b2e:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	f000 f872 	bl	8003c20 <_init>
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	4d0a      	ldr	r5, [pc, #40]	; (8003b68 <__libc_init_array+0x40>)
 8003b40:	4c0a      	ldr	r4, [pc, #40]	; (8003b6c <__libc_init_array+0x44>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003d34 	.word	0x08003d34
 8003b64:	08003d34 	.word	0x08003d34
 8003b68:	08003d34 	.word	0x08003d34
 8003b6c:	08003d38 	.word	0x08003d38

08003b70 <__retarget_lock_acquire_recursive>:
 8003b70:	4770      	bx	lr

08003b72 <__retarget_lock_release_recursive>:
 8003b72:	4770      	bx	lr

08003b74 <memcpy>:
 8003b74:	440a      	add	r2, r1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b7c:	d100      	bne.n	8003b80 <memcpy+0xc>
 8003b7e:	4770      	bx	lr
 8003b80:	b510      	push	{r4, lr}
 8003b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b86:	4291      	cmp	r1, r2
 8003b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b8c:	d1f9      	bne.n	8003b82 <memcpy+0xe>
 8003b8e:	bd10      	pop	{r4, pc}

08003b90 <_free_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4605      	mov	r5, r0
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d040      	beq.n	8003c1a <_free_r+0x8a>
 8003b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b9c:	1f0c      	subs	r4, r1, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfb8      	it	lt
 8003ba2:	18e4      	addlt	r4, r4, r3
 8003ba4:	f7ff ffac 	bl	8003b00 <__malloc_lock>
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <_free_r+0x8c>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	b933      	cbnz	r3, 8003bbc <_free_r+0x2c>
 8003bae:	6063      	str	r3, [r4, #4]
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb8:	f7ff bfa8 	b.w	8003b0c <__malloc_unlock>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d908      	bls.n	8003bd2 <_free_r+0x42>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	1821      	adds	r1, r4, r0
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	bf01      	itttt	eq
 8003bc8:	6819      	ldreq	r1, [r3, #0]
 8003bca:	685b      	ldreq	r3, [r3, #4]
 8003bcc:	1809      	addeq	r1, r1, r0
 8003bce:	6021      	streq	r1, [r4, #0]
 8003bd0:	e7ed      	b.n	8003bae <_free_r+0x1e>
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b10b      	cbz	r3, 8003bdc <_free_r+0x4c>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d9fa      	bls.n	8003bd2 <_free_r+0x42>
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	1850      	adds	r0, r2, r1
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d10b      	bne.n	8003bfc <_free_r+0x6c>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	4401      	add	r1, r0
 8003be8:	1850      	adds	r0, r2, r1
 8003bea:	4283      	cmp	r3, r0
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	d1e0      	bne.n	8003bb2 <_free_r+0x22>
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4408      	add	r0, r1
 8003bf6:	6010      	str	r0, [r2, #0]
 8003bf8:	6053      	str	r3, [r2, #4]
 8003bfa:	e7da      	b.n	8003bb2 <_free_r+0x22>
 8003bfc:	d902      	bls.n	8003c04 <_free_r+0x74>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	e7d6      	b.n	8003bb2 <_free_r+0x22>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	1821      	adds	r1, r4, r0
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf01      	itttt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	1809      	addeq	r1, r1, r0
 8003c12:	6021      	streq	r1, [r4, #0]
 8003c14:	6063      	str	r3, [r4, #4]
 8003c16:	6054      	str	r4, [r2, #4]
 8003c18:	e7cb      	b.n	8003bb2 <_free_r+0x22>
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	2000331c 	.word	0x2000331c

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
